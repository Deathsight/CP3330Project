{"ast":null,"code":"class Entity {\n  constructor(entity) {\n    this.authFetch = (url, options) => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        options = options || {};\n        options.headers = options.headers || {};\n        options.headers.Authorization = \"Bearer \".concat(token);\n      }\n\n      console.log(url, options);\n      return fetch(url, options);\n    };\n\n    this.findAll = async () => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findOne = async id => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id));\n      const json = await response.json();\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByName = async username => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?username=\").concat(username));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByQuery = async query => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?query=\").concat(query));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.editProfile = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.create = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      console.log('response', response);\n      return response.ok;\n    };\n\n    this.edit = async (id, item) => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.remove = async Id => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(Id), {\n        method: 'DELETE'\n      }); // const json = await response.json()\n      // console.log('json',json)\n\n      return response.ok;\n    };\n\n    this.entity = entity;\n  } // wrapper to include authorization in fetch\n\n\n}\n\nconst DB = {\n  Advertisements: new Entity('Advertisements'),\n  Assets: new Entity('Assets'),\n  AssetRentings: new Entity('AssetRentings'),\n  AssetRentingEvents: new Entity('AssetRentingEvents'),\n  BookingSeats: new Entity('BookingSeats'),\n  Cleanings: new Entity('Cleanings'),\n  Events: new Entity('Events'),\n  Favorites: new Entity('Favorites'),\n  FeedBacks: new Entity('FeedBacks'),\n  Likes: new Entity('Likes'),\n  Logs: new Entity('Logs'),\n  News: new Entity('News'),\n  Parkings: new Entity('Parkings'),\n  Payments: new Entity('Payments'),\n  Renters: new Entity('Renters'),\n  Rentings: new Entity('Rentings'),\n  Roles: new Entity('Roles'),\n  Seats: new Entity('Seats'),\n  Securitys: new Entity('Securitys'),\n  Services: new Entity('Services'),\n  STicketChats: new Entity('STicketChats'),\n  STicketTypes: new Entity('STicketTypes'),\n  Stores: new Entity('Stores'),\n  StorePMs: new Entity('StorePMs'),\n  Subscriptions: new Entity('Subscriptions'),\n  SubscriptionLevels: new Entity('SubscriptionLevels'),\n  SupportTickets: new Entity('SupportTickets'),\n  Theaters: new Entity('Theaters'),\n  TheaterPMes: new Entity('TheaterPMs'),\n  TheaterServices: new Entity('TheaterServices'),\n  Users: new Entity('Users')\n};\nexport default DB;","map":{"version":3,"sources":["C:/Users/StudentAdmin/Documents/GitHub/CP3330Project/mallprojectreact/src/db.js"],"names":["Entity","constructor","entity","authFetch","url","options","token","localStorage","getItem","headers","Authorization","console","log","fetch","findAll","response","json","ok","findOne","id","findByName","username","findByQuery","query","editProfile","item","method","body","JSON","stringify","create","edit","remove","Id","DB","Advertisements","Assets","AssetRentings","AssetRentingEvents","BookingSeats","Cleanings","Events","Favorites","FeedBacks","Likes","Logs","News","Parkings","Payments","Renters","Rentings","Roles","Seats","Securitys","Services","STicketChats","STicketTypes","Stores","StorePMs","Subscriptions","SubscriptionLevels","SupportTickets","Theaters","TheaterPMes","TheaterServices","Users"],"mappings":"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","sourcesContent":["class Entity{\r\n\r\n    constructor(entity){\r\n        this.entity = entity\r\n    }\r\n\r\n    // wrapper to include authorization in fetch\r\n    authFetch = (url, options) => {\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            options = options || {}\r\n            options.headers = options.headers || {}\r\n            options.headers.Authorization = `Bearer ${token}`\r\n        }\r\n        console.log(url, options)\r\n        return fetch(url, options)\r\n    }\r\n\r\n    findAll = async () => {\r\n        const  response = await this.authFetch(`/api/${this.entity}`)\r\n        const json = await response.json()\r\n        console.log(json)\r\n        if(response.ok){\r\n            return json\r\n        }\r\n    }\r\n\r\n    findOne = async (id) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}/${id}`);\r\n        const json = await response.json();\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    findByName = async (username) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}?username=${username}`);\r\n        const json = await response.json();\r\n        console.log(json)\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    findByQuery = async (query) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}?query=${query}`);\r\n        const json = await response.json();\r\n        console.log(json)\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    editProfile = async (item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}`,{\r\n            method : 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n        return response.ok\r\n    }\r\n\r\n\r\n    create = async (item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}`,{\r\n            method : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n\r\n        console.log('response', response)\r\n        return response.ok\r\n    }\r\n\r\n    edit = async (id,item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}/${id}`,{\r\n            method : 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n        return response.ok\r\n    }\r\n\r\n    remove = async (Id) => {\r\n        const  response = await this.authFetch(`/api/${this.entity}/${Id}`,{\r\n            method : 'DELETE',\r\n        })\r\n        // const json = await response.json()\r\n        // console.log('json',json)\r\n        return response.ok\r\n    }\r\n}\r\n\r\nconst DB = {\r\n    Advertisements: new Entity('Advertisements'),\r\n    Assets: new Entity('Assets'),\r\n    AssetRentings: new Entity('AssetRentings'),\r\n    AssetRentingEvents: new Entity('AssetRentingEvents'),\r\n    BookingSeats: new Entity('BookingSeats'),\r\n    Cleanings: new Entity('Cleanings'),\r\n    Events: new Entity('Events'),\r\n    Favorites: new Entity('Favorites'),\r\n    FeedBacks: new Entity('FeedBacks'),\r\n    Likes: new Entity('Likes'),\r\n    Logs: new Entity('Logs'),\r\n    News: new Entity('News'),\r\n    Parkings: new Entity('Parkings'),\r\n    Payments: new Entity('Payments'),\r\n    Renters: new Entity('Renters'),\r\n    Rentings: new Entity('Rentings'),\r\n    Roles: new Entity('Roles'),\r\n    Seats: new Entity('Seats'),\r\n    Securitys: new Entity('Securitys'),\r\n    Services: new Entity('Services'),\r\n    STicketChats: new Entity('STicketChats'),\r\n    STicketTypes: new Entity('STicketTypes'),\r\n    Stores: new Entity('Stores'),\r\n    StorePMs: new Entity('StorePMs'),\r\n    Subscriptions: new Entity('Subscriptions'),\r\n    SubscriptionLevels: new Entity('SubscriptionLevels'),\r\n    SupportTickets: new Entity('SupportTickets'),\r\n    Theaters: new Entity('Theaters'),\r\n    TheaterPMes: new Entity('TheaterPMs'),\r\n    TheaterServices: new Entity('TheaterServices'),\r\n    Users: new Entity('Users')\r\n}\r\n\r\nexport default DB"]},"metadata":{},"sourceType":"module"}