{"ast":null,"code":"class Entity {\n  constructor(entity) {\n    this.authFetch = (url, options) => {\n      const token = localStorage.getItem(\"token\");\n\n      if (token) {\n        options = options || {};\n        options.headers = options.headers || {};\n        options.headers.Authorization = \"Bearer \".concat(token);\n      }\n\n      console.log(url, options);\n      return fetch(url, options);\n    };\n\n    this.findAll = async () => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findOne = async id => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id));\n      const json = await response.json();\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByName = async username => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?username=\").concat(username));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByQuery = async query => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?query=\").concat(query));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.editProfile = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.create = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      console.log(\"response\", response);\n      return response.ok;\n    };\n\n    this.SendEmail = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      console.log(\"response\", response);\n      return response.ok;\n    };\n\n    this.UploadImage = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        body: JSON.stringify(item)\n      });\n      console.log(\"response\", response);\n      return response.ok;\n    };\n\n    this.edit = async (id, item) => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id), {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.remove = async Id => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(Id), {\n        method: \"DELETE\"\n      }); // const json = await response.json()\n      // console.log('json',json)\n\n      return response.ok;\n    };\n\n    this.entity = entity;\n  } // wrapper to include authorization in fetch\n\n\n}\n\nconst DB = {\n  Advertisements: new Entity(\"Advertisements\"),\n  Assets: new Entity(\"Assets\"),\n  AssetRentings: new Entity(\"AssetRentings\"),\n  AssetRentingEvents: new Entity(\"AssetRentingEvents\"),\n  BookingSeats: new Entity(\"BookingSeats\"),\n  Cleanings: new Entity(\"Cleanings\"),\n  Events: new Entity(\"Events\"),\n  Favorites: new Entity(\"Favorites\"),\n  FeedBacks: new Entity(\"FeedBacks\"),\n  Likes: new Entity(\"Likes\"),\n  Logs: new Entity(\"Logs\"),\n  News: new Entity(\"News\"),\n  Parkings: new Entity(\"Parkings\"),\n  Payments: new Entity(\"Payments\"),\n  Renters: new Entity(\"Renters\"),\n  Rentings: new Entity(\"Rentings\"),\n  Roles: new Entity(\"Roles\"),\n  Seats: new Entity(\"Seats\"),\n  Securities: new Entity(\"Securities\"),\n  Services: new Entity(\"Services\"),\n  STicketChats: new Entity(\"STicketChats\"),\n  STicketTypes: new Entity(\"STicketTypes\"),\n  Stores: new Entity(\"Stores\"),\n  StorePMs: new Entity(\"StorePMs\"),\n  Subscriptions: new Entity(\"Subscriptions\"),\n  SubscriptionLevels: new Entity(\"SubscriptionLevels\"),\n  SupportTickets: new Entity(\"SupportTickets\"),\n  Theaters: new Entity(\"Theaters\"),\n  TheaterPMes: new Entity(\"TheaterPMs\"),\n  TheaterServices: new Entity(\"TheaterServices\"),\n  Users: new Entity(\"Users\"),\n  Emails: new Entity(\"Emails\"),\n  UploadImages: new Entity(\"UploadImages\")\n};\nexport default DB;","map":{"version":3,"sources":["C:/Users/StudentAdmin/Documents/GitHub/CP3330Project/mallprojectreact/src/db.js"],"names":["Entity","constructor","entity","authFetch","url","options","token","localStorage","getItem","headers","Authorization","console","log","fetch","findAll","response","json","ok","findOne","id","findByName","username","findByQuery","query","editProfile","item","method","body","JSON","stringify","create","SendEmail","UploadImage","edit","remove","Id","DB","Advertisements","Assets","AssetRentings","AssetRentingEvents","BookingSeats","Cleanings","Events","Favorites","FeedBacks","Likes","Logs","News","Parkings","Payments","Renters","Rentings","Roles","Seats","Securities","Services","STicketChats","STicketTypes","Stores","StorePMs","Subscriptions","SubscriptionLevels","SupportTickets","Theaters","TheaterPMes","TheaterServices","Users","Emails","UploadImages"],"mappings":"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","sourcesContent":["class Entity {\r\n  constructor(entity) {\r\n    this.entity = entity;\r\n  }\r\n\r\n  // wrapper to include authorization in fetch\r\n  authFetch = (url, options) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      options = options || {};\r\n      options.headers = options.headers || {};\r\n      options.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    console.log(url, options);\r\n    return fetch(url, options);\r\n  };\r\n\r\n  findAll = async () => {\r\n    const response = await this.authFetch(`/api/${this.entity}`);\r\n    const json = await response.json();\r\n    console.log(json);\r\n    if (response.ok) {\r\n      return json;\r\n    }\r\n  };\r\n\r\n  findOne = async id => {\r\n    // console.log(id);\r\n    const response = await this.authFetch(`/api/${this.entity}/${id}`);\r\n    const json = await response.json();\r\n    if (response.ok) {\r\n      return json;\r\n    }\r\n  };\r\n\r\n  findByName = async username => {\r\n    // console.log(id);\r\n    const response = await this.authFetch(\r\n      `/api/${this.entity}?username=${username}`\r\n    );\r\n    const json = await response.json();\r\n    console.log(json);\r\n    if (response.ok) {\r\n      return json;\r\n    }\r\n  };\r\n\r\n  findByQuery = async query => {\r\n    // console.log(id);\r\n    const response = await this.authFetch(`/api/${this.entity}?query=${query}`);\r\n    const json = await response.json();\r\n    console.log(json);\r\n    if (response.ok) {\r\n      return json;\r\n    }\r\n  };\r\n\r\n  editProfile = async item => {\r\n    const response = await this.authFetch(`/api/${this.entity}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(item)\r\n    });\r\n    return response.ok;\r\n  };\r\n\r\n  create = async item => {\r\n    const response = await this.authFetch(`/api/${this.entity}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(item)\r\n    });\r\n\r\n    console.log(\"response\", response);\r\n    return response.ok;\r\n  };\r\n\r\n  // this function connected wtih Email Controller to send an email using POSST\r\n  SendEmail = async item => {\r\n    const response = await this.authFetch(`/api/${this.entity}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(item)\r\n    });\r\n\r\n    console.log(\"response\", response);\r\n    return response.ok;\r\n  };\r\n\r\n  UploadImage = async item => {\r\n    const response = await this.authFetch(`/api/${this.entity}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\"\r\n      },\r\n      body: JSON.stringify(item)\r\n    });\r\n\r\n    console.log(\"response\", response);\r\n    return response.ok;\r\n  };\r\n\r\n  edit = async (id, item) => {\r\n    const response = await this.authFetch(`/api/${this.entity}/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(item)\r\n    });\r\n    return response.ok;\r\n  };\r\n\r\n  remove = async Id => {\r\n    const response = await this.authFetch(`/api/${this.entity}/${Id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    // const json = await response.json()\r\n    // console.log('json',json)\r\n    return response.ok;\r\n  };\r\n}\r\n\r\nconst DB = {\r\n  Advertisements: new Entity(\"Advertisements\"),\r\n  Assets: new Entity(\"Assets\"),\r\n  AssetRentings: new Entity(\"AssetRentings\"),\r\n  AssetRentingEvents: new Entity(\"AssetRentingEvents\"),\r\n  BookingSeats: new Entity(\"BookingSeats\"),\r\n  Cleanings: new Entity(\"Cleanings\"),\r\n  Events: new Entity(\"Events\"),\r\n  Favorites: new Entity(\"Favorites\"),\r\n  FeedBacks: new Entity(\"FeedBacks\"),\r\n  Likes: new Entity(\"Likes\"),\r\n  Logs: new Entity(\"Logs\"),\r\n  News: new Entity(\"News\"),\r\n  Parkings: new Entity(\"Parkings\"),\r\n  Payments: new Entity(\"Payments\"),\r\n  Renters: new Entity(\"Renters\"),\r\n  Rentings: new Entity(\"Rentings\"),\r\n  Roles: new Entity(\"Roles\"),\r\n  Seats: new Entity(\"Seats\"),\r\n  Securities: new Entity(\"Securities\"),\r\n  Services: new Entity(\"Services\"),\r\n  STicketChats: new Entity(\"STicketChats\"),\r\n  STicketTypes: new Entity(\"STicketTypes\"),\r\n  Stores: new Entity(\"Stores\"),\r\n  StorePMs: new Entity(\"StorePMs\"),\r\n  Subscriptions: new Entity(\"Subscriptions\"),\r\n  SubscriptionLevels: new Entity(\"SubscriptionLevels\"),\r\n  SupportTickets: new Entity(\"SupportTickets\"),\r\n  Theaters: new Entity(\"Theaters\"),\r\n  TheaterPMes: new Entity(\"TheaterPMs\"),\r\n  TheaterServices: new Entity(\"TheaterServices\"),\r\n  Users: new Entity(\"Users\"),\r\n  Emails: new Entity(\"Emails\"),\r\n  UploadImages: new Entity(\"UploadImages\")\r\n};\r\n\r\nexport default DB;\r\n"]},"metadata":{},"sourceType":"module"}