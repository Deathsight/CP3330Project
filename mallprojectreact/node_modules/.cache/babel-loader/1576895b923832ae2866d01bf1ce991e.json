{"ast":null,"code":"class Entity {\n  constructor(entity) {\n    this.authFetch = (url, options) => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        options = options || {};\n        options.headers = options.headers || {};\n        options.headers.Authorization = \"Bearer \".concat(token);\n      }\n\n      console.log(url, options);\n      return fetch(url, options);\n    };\n\n    this.findAll = async () => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findOne = async id => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id));\n      const json = await response.json();\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByName = async username => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?username=\").concat(username));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.findByQuery = async query => {\n      // console.log(id);\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"?query=\").concat(query));\n      const json = await response.json();\n      console.log(json);\n\n      if (response.ok) {\n        return json;\n      }\n    };\n\n    this.editProfile = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.create = async item => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity), {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      console.log('response', response);\n      return response.ok;\n    };\n\n    this.edit = async (id, item) => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(id), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      return response.ok;\n    };\n\n    this.remove = async Id => {\n      const response = await this.authFetch(\"/api/\".concat(this.entity, \"/\").concat(Id), {\n        method: 'DELETE'\n      }); // const json = await response.json()\n      // console.log('json',json)\n\n      return response.ok;\n    };\n\n    this.entity = entity;\n  } // wrapper to include authorization in fetch\n\n\n}\n\nconst DB = {\n  Assets: new Entity('Assets'),\n  PricingModels: new Entity('PricingModels'),\n  Customers: new Entity('Customers'),\n  Bookings: new Entity('Bookings'),\n  AssetBookings: new Entity('AssetBookings')\n};\nexport default DB;","map":{"version":3,"sources":["C:/Users/StudentAdmin/Documents/GitHub/CP3330Project/mallprojectreact/src/db.js"],"names":["Entity","constructor","entity","authFetch","url","options","token","localStorage","getItem","headers","Authorization","console","log","fetch","findAll","response","json","ok","findOne","id","findByName","username","findByQuery","query","editProfile","item","method","body","JSON","stringify","create","edit","remove","Id","DB","Assets","PricingModels","Customers","Bookings","AssetBookings"],"mappings":"AAAA,MAAMA,MAAN,CAAY;AAERC,EAAAA,WAAW,CAACC,MAAD,EAAQ;AAAA,SAKnBC,SALmB,GAKP,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC1B,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAGF,KAAH,EAAS;AACLD,QAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,QAAAA,OAAO,CAACI,OAAR,GAAkBJ,OAAO,CAACI,OAAR,IAAmB,EAArC;AACAJ,QAAAA,OAAO,CAACI,OAAR,CAAgBC,aAAhB,oBAA0CJ,KAA1C;AACH;;AACDK,MAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EAAiBC,OAAjB;AACA,aAAOQ,KAAK,CAACT,GAAD,EAAMC,OAAN,CAAZ;AACH,KAdkB;;AAAA,SAgBnBS,OAhBmB,GAgBT,YAAY;AAClB,YAAOC,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,EAAxB;AACA,YAAMc,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAnB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AACA,UAAGD,QAAQ,CAACE,EAAZ,EAAe;AACX,eAAOD,IAAP;AACH;AACJ,KAvBkB;;AAAA,SAyBnBE,OAzBmB,GAyBT,MAAOC,EAAP,IAAc;AACpB;AACA,YAAMJ,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,cAAsCiB,EAAtC,EAAvB;AACA,YAAMH,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAnB;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,eAAOD,IAAP;AACD;AACF,KAhCgB;;AAAA,SAkCnBI,UAlCmB,GAkCN,MAAOC,QAAP,IAAoB;AAC7B;AACA,YAAMN,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,uBAA+CmB,QAA/C,EAAvB;AACA,YAAML,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAnB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,eAAOD,IAAP;AACD;AACF,KA1CgB;;AAAA,SA4CnBM,WA5CmB,GA4CL,MAAOC,KAAP,IAAiB;AAC3B;AACA,YAAMR,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,oBAA4CqB,KAA5C,EAAvB;AACA,YAAMP,IAAI,GAAG,MAAMD,QAAQ,CAACC,IAAT,EAAnB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;;AACA,UAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,eAAOD,IAAP;AACD;AACF,KApDgB;;AAAA,SAsDnBQ,WAtDmB,GAsDL,MAAOC,IAAP,IAAgB;AAC1B,YAAMV,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,GAAqC;AACxDwB,QAAAA,MAAM,EAAG,KAD+C;AAExDjB,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF+C;AAKxDkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALkD,OAArC,CAAvB;AAOA,aAAOV,QAAQ,CAACE,EAAhB;AACH,KA/DkB;;AAAA,SAkEnBa,MAlEmB,GAkEV,MAAOL,IAAP,IAAgB;AACrB,YAAMV,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,GAAqC;AACxDwB,QAAAA,MAAM,EAAG,MAD+C;AAExDjB,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF+C;AAKxDkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALkD,OAArC,CAAvB;AAQAd,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBG,QAAxB;AACA,aAAOA,QAAQ,CAACE,EAAhB;AACH,KA7EkB;;AAAA,SA+EnBc,IA/EmB,GA+EZ,OAAOZ,EAAP,EAAUM,IAAV,KAAmB;AACtB,YAAMV,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,cAAsCiB,EAAtC,GAA2C;AAC9DO,QAAAA,MAAM,EAAG,KADqD;AAE9DjB,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFqD;AAK9DkB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALwD,OAA3C,CAAvB;AAOA,aAAOV,QAAQ,CAACE,EAAhB;AACH,KAxFkB;;AAAA,SA0FnBe,MA1FmB,GA0FV,MAAOC,EAAP,IAAc;AACnB,YAAOlB,QAAQ,GAAG,MAAM,KAAKZ,SAAL,gBAAuB,KAAKD,MAA5B,cAAsC+B,EAAtC,GAA2C;AAC/DP,QAAAA,MAAM,EAAG;AADsD,OAA3C,CAAxB,CADmB,CAInB;AACA;;AACA,aAAOX,QAAQ,CAACE,EAAhB;AACH,KAjGkB;;AACf,SAAKf,MAAL,GAAcA,MAAd;AACH,GAJO,CAMR;;;AANQ;;AAsGZ,MAAMgC,EAAE,GAAG;AACPC,EAAAA,MAAM,EAAE,IAAInC,MAAJ,CAAW,QAAX,CADD;AAEPoC,EAAAA,aAAa,EAAE,IAAIpC,MAAJ,CAAW,eAAX,CAFR;AAGPqC,EAAAA,SAAS,EAAE,IAAIrC,MAAJ,CAAW,WAAX,CAHJ;AAIPsC,EAAAA,QAAQ,EAAE,IAAItC,MAAJ,CAAW,UAAX,CAJH;AAKPuC,EAAAA,aAAa,EAAE,IAAIvC,MAAJ,CAAW,eAAX;AALR,CAAX;AAQA,eAAekC,EAAf","sourcesContent":["class Entity{\r\n\r\n    constructor(entity){\r\n        this.entity = entity\r\n    }\r\n\r\n    // wrapper to include authorization in fetch\r\n    authFetch = (url, options) => {\r\n        const token = localStorage.getItem('token')\r\n        if(token){\r\n            options = options || {}\r\n            options.headers = options.headers || {}\r\n            options.headers.Authorization = `Bearer ${token}`\r\n        }\r\n        console.log(url, options)\r\n        return fetch(url, options)\r\n    }\r\n\r\n    findAll = async () => {\r\n        const  response = await this.authFetch(`/api/${this.entity}`)\r\n        const json = await response.json()\r\n        console.log(json)\r\n        if(response.ok){\r\n            return json\r\n        }\r\n    }\r\n\r\n    findOne = async (id) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}/${id}`);\r\n        const json = await response.json();\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    findByName = async (username) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}?username=${username}`);\r\n        const json = await response.json();\r\n        console.log(json)\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    findByQuery = async (query) => {\r\n        // console.log(id);\r\n        const response = await this.authFetch(`/api/${this.entity}?query=${query}`);\r\n        const json = await response.json();\r\n        console.log(json)\r\n        if (response.ok) {\r\n          return json;\r\n        }\r\n      };\r\n\r\n    editProfile = async (item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}`,{\r\n            method : 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n        return response.ok\r\n    }\r\n\r\n\r\n    create = async (item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}`,{\r\n            method : 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n\r\n        console.log('response', response)\r\n        return response.ok\r\n    }\r\n\r\n    edit = async (id,item) => {\r\n        const response = await this.authFetch(`/api/${this.entity}/${id}`,{\r\n            method : 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item)\r\n        })\r\n        return response.ok\r\n    }\r\n\r\n    remove = async (Id) => {\r\n        const  response = await this.authFetch(`/api/${this.entity}/${Id}`,{\r\n            method : 'DELETE',\r\n        })\r\n        // const json = await response.json()\r\n        // console.log('json',json)\r\n        return response.ok\r\n    }\r\n}\r\n\r\nconst DB = {\r\n    Assets: new Entity('Assets'),\r\n    PricingModels: new Entity('PricingModels'),\r\n    Customers: new Entity('Customers'),\r\n    Bookings: new Entity('Bookings'),\r\n    AssetBookings: new Entity('AssetBookings')\r\n}\r\n\r\nexport default DB"]},"metadata":{},"sourceType":"module"}